{"version":3,"sources":["pages/Chat.js"],"names":["SideGrid","styled","div","props","isOpen","Chat","theme","border","React","useState","setIsOpen","onClick","sock","SockJS","ws","Stomp","over","dispatch","useDispatch","roomName","history","location","state","room_id","post_id","own_user_id","order_time","user_in_chat","useSelector","chat","userInList","sender_nick","user","user_nickname","sender_profile","user_profile","sender_id","user_id","messageText","useEffect","logger","userAction","loginCheck","token","chatActions","moveChatRoom","getChatMessagesAX","getChatUserAX","wsConnectSubscribe","wsDisConnectUnsubscribe","customAlert","sweetOK","then","res","replace","a","debug","connect","subscribe","data","newMessage","JSON","parse","body","now_time","moment","format","getMessages","createdAt","disconnect","unsubscribe","clearTimeout","waitForConnection","e","callback","setTimeout","readyState","Fragment","minHeight","margin","bg","shape","align_items","transitions","touch","pullRight","sidebar","_onClick","sendBen","other_user_id","other_user_name","sweetNeedLogin","type","roomId","senderId","message","send","stringify","sweetConfirmReload","sendBreak","open","onSetOpen","sidebarClassName","styles","content","text_align","sendMessage","new_message","sender","senderImg","writeMessage"],"mappings":"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","file":"static/js/9.2eb98675.chunk.js","sourcesContent":["import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { token } from \"../shared/OAuth\";\nimport { history } from \"../redux/configureStore\";\nimport moment from \"moment\";\n\n// 소켓 통신\nimport Stomp from \"stompjs\";\nimport SockJS from \"sockjs-client\";\n\n// style\nimport styled from \"styled-components\";\nimport Spinner from \"../shared/Spinner\";\nimport {\n  Header,\n  MessageList,\n  MessageWrite,\n  SideContent,\n  PcSide,\n} from \"../components\";\nimport { Grid } from \"../elements\";\nimport { actionCreators as chatActions } from \"../redux/modules/chat\";\nimport { actionCreators as userAction } from \"../redux/modules/user\";\nimport theme from \"../styles/theme\";\nimport logger from \"../shared/Console\";\nimport { customAlert } from \"../components/Sweet\";\nimport \"../styles/side.css\";\n\n// side bar\nimport Sidebar from \"react-sidebar\";\n\nconst Chat = (props) => {\n  const { border } = theme;\n\n  // side nav\n  const [isOpen, setIsOpen] = React.useState(false);\n  const onClick = () => {\n    setIsOpen(!isOpen);\n  };\n\n  // 소켓\n  // const sock = new SockJS(\"http://52.78.204.238/chatting\");\n  // const sock = new SockJS(\"http://115.85.182.57/chatting\");\n  const sock = new SockJS(\"https://gorokke.shop/chatting\");\n  const ws = Stomp.over(sock);\n  // ws.reconnect_delay = 500;\n\n  // 현재 방정보\n  const dispatch = useDispatch();\n\n  const roomName = props.history.location.state?.roomName;\n  const room_id = props.history.location.state?.room_id;\n  const post_id = props.history.location.state?.post_id;\n  const own_user_id = props.history.location.state?.own_user_id;\n  const order_time = props.history.location.state?.order_time;\n\n  // 채팅 참여 중인 사용자 정보\n  const user_in_chat = useSelector((state) => state.chat?.userInList);\n\n  // 보낼 메세지 정보\n  const sender_nick = useSelector((state) => state.user.user?.user_nickname);\n  const sender_profile = useSelector((state) => state.user.user?.user_profile);\n  const sender_id = useSelector((state) => state.user.user?.user_id);\n  const messageText = useSelector((state) => state.chat.messageText);\n\n  // 새로고침될때 방 정보 날아가지 않도록 함\n  React.useEffect(() => {\n    logger(\"chat props\", props);\n    logger(\"chat sender info\", sender_profile);\n    logger(\"chat user_in_chat\", user_in_chat);\n    dispatch(userAction.loginCheck());\n\n    if (token) {\n      dispatch(\n        chatActions.moveChatRoom(\n          room_id,\n          roomName,\n          post_id,\n          own_user_id,\n          order_time\n        )\n      );\n      dispatch(chatActions.getChatMessagesAX());\n      dispatch(chatActions.getChatUserAX(room_id));\n    }\n  }, []);\n\n  // 방 정보가 바뀌면 소켓 연결 구독, 구독해제\n  React.useEffect(() => {\n    if (!room_id) {\n      return customAlert\n        .sweetOK(\n          \"잘못된 접근입니다.\",\n          \"홈으로 돌아갑니다.\",\n          \"채팅 신청 후 채팅탭을 이용해주세요.\",\n          \"확인\"\n        )\n        .then((res) => {\n          return history.replace(\"/home\");\n        });\n    }\n    wsConnectSubscribe();\n    return () => {\n      wsDisConnectUnsubscribe();\n    };\n  }, [room_id ? room_id : null]);\n\n  // 채팅방시작하기, 채팅방 클릭 시 room_id에 해당하는 방을 구독\n  const wsConnectSubscribe = async () => {\n    try {\n      ws.debug = null;\n      await ws.connect(\n        {\n          token: token,\n        },\n        () => {\n          ws.subscribe(\n            `/sub/api/chat/rooms/${room_id}`,\n            (data) => {\n              const newMessage = JSON.parse(data.body);\n              logger(\"구독후 새로운 메세지 data\", newMessage);\n\n              // 실시간 채팅 시간 넣어주는 부분\n              const now_time = moment().format(\"YYYY-MM-DD HH:mm:ss\");\n              dispatch(\n                chatActions.getMessages({ ...newMessage, createdAt: now_time })\n              );\n            },\n            {\n              token: token,\n            }\n          );\n        }\n      );\n    } catch (e) {\n      logger(\"소켓 커넥트 에러\", e);\n    }\n  };\n\n  // 다른 방을 클릭하거나 뒤로가기 버튼 클릭시 연결해제 및 구독해제\n  const wsDisConnectUnsubscribe = () => {\n    try {\n      ws.debug = null;\n      ws.disconnect(\n        () => {\n          ws.unsubscribe(\"sub-0\");\n          clearTimeout(waitForConnection);\n        },\n        { token: token }\n      );\n    } catch (e) {\n      logger(\"연결 구독 해체 에러\", e);\n    }\n  };\n\n  // 웹소켓이 연결될 때 까지 실행하는 함수\n  const waitForConnection = (ws, callback) => {\n    setTimeout(() => {\n      if (ws.ws.readyState === 1) {\n        callback();\n      } else {\n        waitForConnection(ws, callback);\n      }\n    }, 0.1);\n  };\n\n  const sendMessage = (new_message) => {\n    try {\n      // 토큰없으면 다시 로그인 시키기\n      if (!token) {\n        customAlert.sweetNeedLogin();\n      }\n      // send할 데이터\n      const data = {\n        type: \"TALK\",\n        roomId: room_id,\n        sender: sender_nick,\n        senderImg: sender_profile,\n        senderId: sender_id,\n        message: new_message,\n        // message : 해당 유저 id\n        // roomId : 방 번호\n      };\n      // 빈 텍스트일때 보내기 방지\n      if (new_message === \"\" || new_message === \" \") {\n        return customAlert.sweetConfirmReload(\n          \"메세지를 입력해주세요\",\n          [\"무엇을 먹을지, 어디서 배달시킬지\", \"이야기해봐요 :)\"],\n          \"\"\n        );\n      }\n      // 로딩\n      // dispatch(chatActions.loading());\n      // dispatch(chatActions.setTime());\n      waitForConnection(ws, () => {\n        ws.debug = null;\n\n        ws.send(\"/pub/message\", { token: token }, JSON.stringify(data));\n        logger(\"메세지보내기 상태\", ws.ws.readyState);\n\n        // 메세지 보내고 나면 다시 초기화시켜주는 작업\n        dispatch(chatActions.writeMessage(\"\"));\n      });\n    } catch (e) {\n      logger(\"message 소켓 함수 에러\", e);\n      logger(\"메세지보내기 상태\", ws.ws.readyState);\n    }\n  };\n\n  const sendBen = (other_user_id, other_user_name) => {\n    try {\n      // 토큰없으면 다시 로그인 시키기\n      if (!token) {\n        customAlert.sweetNeedLogin();\n      }\n      // send할 데이터\n      const data = {\n        type: \"BAN\",\n        roomId: room_id,\n        senderId: sender_id,\n        // 강퇴할 사람 user_id\n        message: other_user_id,\n      };\n\n      // 로딩\n      // dispatch(chatActions.loading());\n      waitForConnection(ws, () => {\n        ws.debug = null;\n\n        ws.send(\"/pub/message\", { token: token }, JSON.stringify(data));\n        logger(\"강퇴 메세지 상태\", ws.ws.readyState);\n        customAlert.sweetOK(\n          \"퇴장 처리가 완료되었어요\",\n          `${other_user_name}님을`,\n          `채팅에서 내보냈어요.`,\n          \"\"\n        );\n      });\n    } catch (e) {\n      customAlert.sweetConfirmReload(\n        \"퇴장 처리 실패\",\n        [\"채팅에서 내보내는 데 실패했어요.\", \"잠시 후 다시 시도해주세요.\"],\n        \"\"\n      );\n      logger(\"message 소켓 함수 에러\", e);\n      logger(\"강퇴 메세지 상태\", ws.ws.readyState);\n    }\n  };\n\n  // 방장 방폭 함수\n  const sendBreak = () => {\n    try {\n      // 토큰없으면 다시 로그인 시키기\n      if (!token) {\n        return customAlert.sweetNeedLogin();\n      }\n      // send할 데이터\n      const data = {\n        type: \"BREAK\",\n        roomId: room_id,\n        senderId: sender_id,\n        message: \"방장이 삭제한 채팅방이에요.\",\n      };\n\n      // 로딩\n      // dispatch(chatActions.loading());\n      waitForConnection(ws, () => {\n        ws.debug = null;\n\n        ws.send(\"/pub/message\", { token: token }, JSON.stringify(data));\n        logger(\"방폭 메세지 상태\", ws.ws.readyState);\n      });\n    } catch (e) {\n      customAlert.sweetConfirmReload(\n        \"방 삭제 실패\",\n        [\"방 삭제 요청에 실패했어요.\"],\n        \"\"\n      );\n      logger(\"message 소켓 함수 에러\", e);\n      logger(\"방폭 메세지 상태\", ws.ws.readyState);\n    }\n  };\n\n  if (!room_id) {\n    return (\n      // alert(\"잘못된 접근입니다\")\n      <React.Fragment>\n        <Spinner />\n      </React.Fragment>\n    );\n  } else {\n    return (\n      <React.Fragment>\n        <PcSide {...props} />\n        <Grid\n          // maxWidth=\"36rem\"\n          minHeight=\"100vh\"\n          // border={border.line1}\n          margin=\"0 auto\"\n          bg=\"#7B6E62\"\n        >\n          <Grid shape=\"container\" align_items=\"flex-end\">\n            <SideGrid isOpen={isOpen}>\n              <Sidebar\n                transitions={true}\n                touch={true}\n                pullRight={true}\n                sidebar={\n                  <SideContent\n                    own_user_id={own_user_id}\n                    order_time={order_time}\n                    roomName={roomName}\n                    _onClick={onClick}\n                    post_id={post_id}\n                    sendBen={sendBen}\n                    sendBreak={sendBreak}\n                  />\n                }\n                open={isOpen}\n                onSetOpen={setIsOpen}\n                sidebarClassName={isOpen ? \"side-nav active\" : \"side-nav\"}\n                styles={{\n                  content: { text_align: \"right\" },\n                }}\n              >\n                <></>\n              </Sidebar>\n            </SideGrid>\n            <Header\n              {...props}\n              shape=\"채팅방\"\n              roomName={roomName}\n              _onClick={onClick}\n            >\n              {roomName}\n            </Header>\n\n            <MessageList />\n            <MessageWrite sendMessage={sendMessage} />\n          </Grid>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n};\n\nconst SideGrid = styled.div`\n  position: absolute;\n  width: 30rem;\n  height: 100vh;\n  z-index: 101;\n  text-align: right;\n  display: ${(props) => (props.isOpen ? \"auto\" : \"none\")};\n  touch-action: none;\n`;\n\nexport default Chat;\n"],"sourceRoot":""}