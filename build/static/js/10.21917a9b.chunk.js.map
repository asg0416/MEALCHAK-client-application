{"version":3,"sources":["pages/ChatRoomList.js","pages/AllowChat.js"],"names":["ChatRoomList","props","dispatch","useDispatch","React","useEffect","document","querySelector","scrollTo","top","left","behavior","userAction","loginCheck","token","chatActions","setChatListAX","awaitChatListAX","clearChat","color","theme","border","fontSize","radius","chat_list","useSelector","state","chat","chatListInfo","await_list","awaitList","Fragment","minWidth","minHeight","margin","padding","shape","height","TapGrid","borderBottom","line3","width","_onClick","history","push","cursor","size","base","bold2","bg60","map","info","idx","new_msg","live_chat","room_id","roomName","post_id","postId","headCountChat","e","own_user_id","order_time","moveChatRoom","pathname","title","join_id","length","src","isWebpSupported","webp","emptyBubblesWebp","png","emptyBubbles","EmptyText","defaultProps","styled","p","bg80","div","AllowChat","requestChatListAX","allow_list","requestList","user_id","user_img","username"],"mappings":"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","file":"static/js/10.21917a9b.chunk.js","sourcesContent":["import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { actionCreators as chatActions } from \"../redux/modules/chat\";\nimport { actionCreators as userAction } from \"../redux/modules/user\";\nimport { history } from \"../redux/configureStore\";\nimport { token } from \"../shared/OAuth\";\n\n// style\nimport { Header, Footer, ChatListItem, AwaitList, PcSide } from \"../components\";\nimport { Grid, Text } from \"../elements\";\nimport theme from \"../styles/theme\";\nimport styled from \"styled-components\";\n\n// 이미지\nimport { png } from \"../styles/img/index\";\nimport { webp } from \"../styles/img/webp/index\";\nimport { isWebpSupported } from \"react-image-webp/dist/utils\";\n\nimport logger from \"../shared/Console\";\n\nconst ChatRoomList = (props) => {\n  const dispatch = useDispatch();\n\n  React.useEffect(() => {\n    document\n      .querySelector(\"body\")\n      .scrollTo({ top: 0, left: 0, behavior: \"instant\" });\n    dispatch(userAction.loginCheck(\"/chatlist\"));\n\n    if (token) {\n      dispatch(chatActions.setChatListAX());\n      dispatch(chatActions.awaitChatListAX());\n      dispatch(chatActions.clearChat());\n    }\n  }, []);\n\n  // 현재 room_id 필요\n\n  const { color, border, radius, fontSize } = theme;\n\n  // 채팅 목록\n  const chat_list = useSelector((state) => state.chat.chatListInfo);\n\n  // 채팅 대기 목록\n  const await_list = useSelector((state) => state.chat.awaitList);\n  \n  const enterRoom = (room_id, roomName, post_id, own_user_id, order_time) => {\n    // 채팅방 들어갔다가 뒤로가기 누르면 자동으로 방나가기\n    // room_id 리덕스에 저장된 걸로 실제 채팅 페이지 이동했을 때 서버연결 시켜서 보여줌\n\n    // 채팅 시작하기 버튼 누를때 입장 axios 요청\n    // 동시에 구독\n    dispatch(\n      chatActions.moveChatRoom(\n        room_id,\n        roomName,\n        post_id,\n        own_user_id,\n        order_time\n      )\n    );\n    history.push({\n      pathname: \"/chatting\",\n      state: {\n        room_id: room_id,\n        roomName: roomName,\n        post_id: post_id,\n        own_user_id: own_user_id,\n        order_time: order_time,\n      },\n    });\n  };\n\n  return (\n    <React.Fragment>\n      <PcSide {...props} />\n      <Grid\n        minWidth=\"36rem\"\n        // maxWidth=\"36rem\"\n        minHeight=\"100vh\"\n        // border={border.line1}\n        margin=\"0 auto\"\n        padding=\"0 0 5.2rem 0\"\n      >\n        <Grid shape=\"container\">\n          <Header {...props} shape=\"채팅리스트\" />\n          <Grid height=\"4.4rem\" />\n          <Footer {...props}></Footer>\n        </Grid>\n        <TapGrid>\n          <Grid\n            borderBottom={border.line3}\n            width=\"100%\"\n            padding=\"0 2rem\"\n            margin=\"0\"\n            _onClick={() => {\n              history.push(\"/chatlist\");\n            }}\n            cursor=\"pointer\"\n          >\n            <Text size={fontSize.base} bold2=\"700\" margin=\"0 0 0.8rem\">\n              참여중인 채팅방\n            </Text>\n          </Grid>\n          <Grid width=\"100%\" padding=\"0 2rem\" margin=\"0\">\n            <Text\n              bold2=\"700\"\n              size={fontSize.base}\n              margin=\"0 0 0.8rem\"\n              color={color.bg60}\n              _onClick={() => {\n                history.push(\"/allowchat\");\n              }}\n              cursor=\"pointer\"\n            >\n              들어온 승인 요청\n            </Text>\n          </Grid>\n        </TapGrid>\n        {chat_list?.map((info, idx) => {\n          return (\n            <ChatListItem\n              key={idx}\n              new_msg={info.new_msg}\n              live_chat={info.live_chat}\n              room_id={info.room_id}\n              roomName={info.roomName}\n              post_id={info.postId}\n              headCountChat={info.headCountChat}\n              _onClick={(e) => {\n                enterRoom(\n                  info.room_id,\n                  info.roomName,\n                  info.postId,\n                  info.own_user_id,\n                  info.order_time\n                );\n              }}\n            />\n          );\n        })}\n\n        {await_list?.map((info, idx) => {\n          return (\n            <AwaitList key={idx} roomName={info.title} join_id={info.join_id} />\n          );\n        })}\n\n        {await_list?.length === 0 && chat_list?.length === 0 && (\n          <>\n            <Grid\n              shape=\"empty\"\n              src={isWebpSupported() ? webp.emptyBubblesWebp : png.emptyBubbles}\n            >\n              <EmptyText theme={theme}>아직 채팅 내용이 없어요.</EmptyText>\n            </Grid>\n            <Grid height=\"20rem\"></Grid>\n          </>\n        )}\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nChatRoomList.defaultProps = {};\n\nconst EmptyText = styled.p`\n  position: relative;\n  text-align: center;\n  top: 15rem;\n  font-size: ${(props) => props.theme.fontSize.base};\n  color: ${(props) => props.theme.color.bg80};\n`;\n\nexport const TapGrid = styled.div`\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  border-bottom: 1px solid rgb(207, 207, 207);\n  display: grid;\n  -webkit-box-align: center;\n  align-items: center;\n  text-align: center;\n  grid-template-columns: 1fr 1fr;\n  padding: 0 2rem;\n`;\n\nexport default ChatRoomList;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { actionCreators as chatActions } from \"../redux/modules/chat\";\nimport { history } from \"../redux/configureStore\";\n\n// style\nimport styled from \"styled-components\";\nimport { Header, Footer, AllowList, PcSide } from \"../components\";\nimport { Grid, Text } from \"../elements\";\nimport theme from \"../styles/theme\";\nimport { TapGrid } from \"./ChatRoomList\";\nimport logger from \"../shared/Console\";\n\n// 이미지\nimport { png } from \"../styles/img/index\";\nimport { webp } from \"../styles/img/webp/index\";\nimport { isWebpSupported } from \"react-image-webp/dist/utils\";\n\nconst AllowChat = (props) => {\n  const dispatch = useDispatch();\n  React.useEffect(() => {\n    dispatch(chatActions.requestChatListAX());\n  }, []);\n\n  // 현재 room_id 필요\n\n  const { color, border, fontSize } = theme;\n\n  // 채팅 승인 목록\n  const allow_list = useSelector((state) => state.chat.requestList);\n\n  return (\n    <React.Fragment>\n      <PcSide {...props} />\n      <Grid\n        // maxWidth=\"36rem\"\n        minHeight=\"100vh\"\n        // border={border.line1}\n        margin=\"0 auto\"\n        padding=\"0 0 6rem 0\"\n      >\n        <Grid shape=\"container\">\n          <Header {...props} shape=\"채팅리스트\" />\n          <Grid height=\"4.4rem\" />\n          <Footer {...props}></Footer>\n          <TapGrid>\n            <Grid\n              width=\"100%\"\n              padding=\"0 2rem\"\n              margin=\"0\"\n              _onClick={() => {\n                history.push(\"/chatlist\");\n              }}\n              cursor=\"pointer\"\n            >\n              <Text\n                size={fontSize.base}\n                margin=\"0 0 0.8rem\"\n                color={color.bg60}\n                bold2=\"700\"\n              >\n                참여중인 채팅방\n              </Text>\n            </Grid>\n            <Grid\n              borderBottom={border.line3}\n              width=\"100%\"\n              padding=\"0 2rem\"\n              margin=\"0\"\n              _onClick={() => {\n                history.push(\"/allowchat\");\n              }}\n              cursor=\"pointer\"\n            >\n              <Text size={fontSize.base} bold2=\"700\" margin=\"0 0 0.8rem\">\n                들어온 승인 요청\n              </Text>\n            </Grid>\n          </TapGrid>\n\n          {allow_list.map((info, idx) => {\n            return (\n              <AllowList\n                key={idx}\n                join_id={info.join_id}\n                roomName={info.title}\n                user_id={info.user_id}\n                user_img={info.user_img}\n                username={info.username}\n              />\n            );\n          })}\n\n          {allow_list.length === 0 && (\n            <>\n              <Grid\n                shape=\"empty\"\n                src={\n                  isWebpSupported() ? webp.emptyBubblesWebp : png.emptyBubbles\n                }\n              >\n                <EmptyText theme={theme}>아직 들어온 요청이 없어요.</EmptyText>\n              </Grid>\n              <Grid height=\"20rem\"></Grid>\n            </>\n          )}\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nAllowChat.defaultProps = {};\n\nconst EmptyText = styled.p`\n  position: relative;\n  text-align: center;\n  top: 15rem;\n  font-size: ${(props) => props.theme.fontSize.base};\n  color: ${(props) => props.theme.color.bg80};\n`;\nexport default AllowChat;\n"],"sourceRoot":""}