{"version":3,"sources":["pages/Upload.js"],"names":["Upload","React","memo","props","dispatch","useDispatch","is_login","useSelector","state","user","post_list","post","list","my_post","myPost","logger","color","theme","radius","border","fontSize","post_address","loc","longitude","latitude","post_id","match","params","id","is_edit","post_idx","findIndex","p","parseInt","my_post_idx","_post","length","useEffect","document","querySelector","scrollTo","top","left","behavior","customAlert","sweetConfirmReload","window","userAction","loginCheck","past_post","title","headCount","foodCategory","category","place","address","detail_place","detail_address","appointmentTime","orderTime","appointmentDate","orderDate","contents","restaurant","shop","useState","post_info","setPostInfo","today","moment","format","now_time","minHeight","margin","shape","height","onChange","value","find_address","location","padding","maxWidth","bg","bg0","brand100","button","cursor","_onClick","disabled","sweetOK","then","select_time","split","join","postAction","editPostAX","bold2","size","base","addPostAX"],"mappings":"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","file":"static/js/26.926379b5.chunk.js","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport moment from \"moment\";\n\nimport { actionCreators as postAction } from \"../redux/modules/post\";\nimport { actionCreators as userAction } from \"../redux/modules/user\";\nimport logger from \"../shared/Console\";\n\n// style\nimport { Button, Grid, Text } from \"../elements\";\nimport { UploadInput, UploadContents, Header, PcSide } from \"../components\";\nimport theme from \"../styles/theme\";\nimport { customAlert } from \"../components/Sweet\";\nimport Spinner from \"../shared/Spinner\";\n\nconst Upload = React.memo((props) => {\n  const dispatch = useDispatch();\n  const is_login = useSelector((state) => state.user.is_login);\n  const post_list = useSelector((state) => state.post.list);\n  const my_post = useSelector((state) => state.user?.myPost);\n  logger(\"Upload:19: \", props);\n  // style\n  const { color, border, radius, fontSize } = theme;\n\n  const post_address = useSelector((state) => state.loc.post_address);\n  const longitude = post_address?.longitude;\n  const latitude = post_address?.latitude;\n\n  // 수정판별\n  const post_id = props.match.params.id;\n  const is_edit = post_id ? true : false;\n  const post_idx = is_edit\n    ? post_list.findIndex((p) => p.post_id === parseInt(post_id))\n    : null;\n  const my_post_idx = is_edit\n    ? my_post.findIndex((p) => p.post_id === parseInt(post_id))\n    : null;\n  let _post = post_list.length > 0 ? post_list[post_idx] : my_post[my_post_idx];\n\n  React.useEffect(() => {\n    document\n      .querySelector(\"body\")\n      .scrollTo({ top: 0, left: 0, behavior: \"instant\" });\n    if (is_edit && !_post) {\n      customAlert.sweetConfirmReload(\n        \"해당게시물을 찾을 수 없습니다.\",\n        null,\n        \"goBack\"\n      );\n      return;\n    }\n\n    logger(\"post 수정 전 내용\", _post);\n    logger(\"post 수정 전 내용\", is_edit);\n  }, []);\n\n  React.useEffect(() => {\n    window.scrollTo(0, 0);\n    dispatch(userAction.loginCheck(\"/upload\"));\n  }, []);\n\n  // upload 될 내용\n  const past_post = {\n    title: _post?.title,\n    headCount: _post?.headCount,\n    foodCategory: _post?.category,\n    place: _post?.address,\n    detail_place: _post?.detail_address,\n    appointmentTime: _post?.orderTime,\n    appointmentDate: _post?.orderDate,\n    contents: _post?.contents,\n    restaurant: _post?.shop,\n    longitude: longitude,\n    latitude: latitude,\n  };\n  const [post_info, setPostInfo] = useState(_post ? { ...past_post } : {});\n  const today = moment().format(\"YYYY-MM-DD\");\n  const now_time = moment().format(\"HH:mm\");\n\n  const uploadBtn = () => {\n    // 모집글 작성 시 상위, 하위 컴포넌트들에서 올바르지 않은 value있을때 처리하는 과정\n    if (post_info.disabled) {\n      return customAlert\n        .sweetOK(\n          \"입력 가능한 글자수를 초과했어요\",\n          \"모집글 작성 시 255자 이내로 작성해주세요.\"\n        )\n        .then(() => {\n          return;\n        });\n    }\n\n    if (!post_info.title || post_info.title === \"\") {\n      customAlert.sweetConfirmReload(\n        \"앗 빈칸이 있어요\",\n        [`모집글의 /제목/을 작성해주세요.`],\n        \"\"\n      );\n      return;\n    }\n    if (!post_info.contents || post_info.contents === \"\") {\n      customAlert.sweetConfirmReload(\n        \"앗 빈칸이 있어요\",\n        [`모집글의 /내용/을 작성해주세요.`],\n        \"\"\n      );\n      return;\n    }\n    if (!post_info?.place || post_info?.place === \"\") {\n      customAlert.sweetConfirmReload(\n        \"앗 빈칸이 있어요\",\n        [\"만날 장소에서 주소 찾기 버튼을 눌러\", `주소;를 입력해주세요.`],\n        \"\"\n      );\n      return;\n    }\n    if (!post_info?.detail_place || post_info?.detail_place === \"\") {\n      customAlert.sweetConfirmReload(\n        \"앗 빈칸이 있어요\",\n        [`상세 주소;를 작성해주세요.`],\n        \"\"\n      );\n      return;\n    }\n    if (!post_info.restaurant || post_info.restaurant === \"\") {\n      customAlert.sweetConfirmReload(\n        \"앗 빈칸이 있어요\",\n        [\"배달 예정인 식당 ;이름을 적어주세요.\"],\n        \"\"\n      );\n      return;\n    }\n    if (!post_info.headCount || post_info.headCount === \"0\") {\n      customAlert.sweetConfirmReload(\n        \"앗 빈칸이 있어요\",\n        [`모집 인원 수;를 선택해주세요.`],\n        \"\"\n      );\n      return;\n    }\n\n    // 모집 날짜, 시간의 경우 디폴트 값으로 현재 시간, 날짜 넣음\n    post_info.appointmentDate = post_info.appointmentDate ?? today;\n    post_info.appointmentTime = post_info.appointmentTime ?? now_time;\n\n    // 시간의 경우 날짜가 내일 이후면 어떤 시간도 상관없지만 오늘일 경우 현재시간 이전일 수 없어서 조건 줌\n    if (post_info.appointmentDate === today) {\n      const select_time = parseInt(\n        post_info.appointmentTime.split(\":\").join(\"\")\n      );\n      const time_now = parseInt(now_time.split(\":\").join(\"\"));\n\n      // 선택시간이 과거인 경우\n      if (time_now >= select_time) {\n        return customAlert.sweetConfirmReload(\n          \"배달 주문 예정 시간을 확인해주세요\",\n          [\"현재시간보다 과거로 설정됐어요.\"],\n          \"\"\n        );\n      }\n    }\n\n    if (!post_info.foodCategory || post_info.foodCategory === \"\") {\n      customAlert.sweetConfirmReload(\n        \"앗 빈칸이 있어요\",\n        [`음식의 /카테고리/를 선택해주세요.`],\n        \"\"\n      );\n      return;\n    }\n\n    logger(\"post 업로드 상태\", post_info);\n    delete post_info.disabled;\n    dispatch(postAction.addPostAX(post_info));\n  };\n\n  const UploadEditBtn = () => {\n    logger(\"수정 버튼, post_info\", post_info);\n\n    // 모집글 작성 시 상위, 하위 컴포넌트들에서 올바르지 않은 value있을때 처리하는 과정\n    if (post_info.disabled) {\n      return customAlert\n        .sweetOK(\n          \"입력 가능한 글자수를 초과했어요\",\n          \"모집글 작성 시 255자 이내로 작성해주세요.\"\n        )\n        .then(() => {\n          return;\n        });\n    }\n    if (!post_info.title || post_info.title === \"\") {\n      customAlert.sweetConfirmReload(\n        \"앗 빈칸이 있어요\",\n        [`모집글의 /제목/을 작성해주세요.`],\n        \"\"\n      );\n      return;\n    }\n    if (!post_info.contents || post_info.contents === \"\") {\n      customAlert.sweetConfirmReload(\n        \"앗 빈칸이 있어요\",\n        [`모집글의 /내용/을 작성해주세요.`],\n        \"\"\n      );\n      return;\n    }\n    if (!post_info.place || post_info.place === \"\") {\n      customAlert.sweetConfirmReload(\n        \"앗 빈칸이 있어요\",\n        [\"만날 장소에서 주소 찾기 버튼을 눌러\", `주소;를 입력해주세요.`],\n        \"\"\n      );\n      return;\n    }\n    if (!post_info?.detail_place || post_info?.detail_place === \"\") {\n      customAlert.sweetConfirmReload(\n        \"앗 빈칸이 있어요\",\n        [`상세 주소;를 작성해주세요.`],\n        \"\"\n      );\n      return;\n    }\n    if (!post_info.restaurant || post_info.restaurant === \"\") {\n      customAlert.sweetConfirmReload(\n        \"앗 빈칸이 있어요\",\n        [\"배달 예정인 식당; 이름을 적어주세요.\"],\n        \"\"\n      );\n      return;\n    }\n    if (!post_info.headCount || post_info.headCount === \"0\") {\n      customAlert.sweetConfirmReload(\n        \"앗 빈칸이 있어요\",\n        [`모집 인원 수;를 선택해주세요.`],\n        \"\"\n      );\n      return;\n    }\n\n    // 시간의 경우 날짜가 내일 이후면 어떤 시간도 상관없지만 오늘일 경우 현재시간 이전일 수 없어서 조건 줌\n    if (post_info.appointmentDate === today) {\n      const select_time = parseInt(\n        post_info.appointmentTime.split(\":\").join(\"\")\n      );\n      const time_now = parseInt(now_time.split(\":\").join(\"\"));\n\n      // 선택시간이 과거인 경우\n      if (time_now > select_time) {\n        return customAlert.sweetConfirmReload(\n          \"배달 주문 예정 시간을 확인해주세요\",\n          [\"현재시간보다 과거로 설정됐어요.\"],\n          \"\"\n        );\n      }\n    }\n    if (!post_info.foodCategory || post_info.foodCategory === \"\") {\n      customAlert.sweetConfirmReload(\n        \"앗 빈칸이 있어요\",\n        [`음식의 /카테고리/를 선택해주세요.`],\n        \"\"\n      );\n      return;\n    }\n    delete post_info.disabled;\n    dispatch(postAction.editPostAX(post_id, post_info, (my_post.length > 0 ? \"/mypost\" : null)));\n  };\n\n  if (is_login) {\n    return (\n      <>\n        <PcSide {...props} />\n        <Grid\n          // maxWidth=\"36rem\"\n          minHeight=\"100vh\"\n          // border={border.line1}\n          margin=\"0 auto\"\n        >\n          <Grid shape=\"container\">\n            <Header {...props} shape=\"모임 만들기\" />\n            <Grid height=\"4.4rem\" />\n            <UploadContents\n              post_info={post_info}\n              onChange={(value) => setPostInfo({ ...post_info, ...value })}\n            />\n\n            {/* <Grid borderBottom={border.line2}></Grid> */}\n            <UploadInput\n              post_info={post_info}\n              find_address={props.location.state?.address}\n              onChange={(value) => setPostInfo({ ...post_info, ...value })}\n            />\n            {/* <Grid height=\"10rem\" /> */}\n            <Grid padding=\"0 2rem\">\n              <Grid\n                height=\"auto\"\n                maxWidth=\"36rem\"\n                margin=\"0\"\n                padding=\"2.8rem 0 2.7rem\"\n                bg={color.bg0}\n              >\n                {is_edit ? (\n                  <Button\n                    bg={color.brand100}\n                    height=\"5rem\"\n                    border=\"none\"\n                    radius={radius.button}\n                    cursor=\"t\"\n                    _onClick={UploadEditBtn}\n                  >\n                    <Text color={color.bg0} bold2=\"700\" size={fontSize.base}>\n                      모집글 수정하기\n                    </Text>\n                  </Button>\n                ) : (\n                  <Button\n                    bg={color.brand100}\n                    height=\"5rem\"\n                    border=\"none\"\n                    radius={radius.button}\n                    cursor=\"t\"\n                    _onClick={uploadBtn}\n                  >\n                    <Text color={color.bg0} bold2=\"700\" size={fontSize.base}>\n                      밀착할 사람 모집하기\n                    </Text>\n                  </Button>\n                )}\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </>\n    );\n  } else {\n    return <Spinner />;\n  }\n});\n\nexport default Upload;\n"],"sourceRoot":""}